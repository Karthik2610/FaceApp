// <auto-generated />
using FaceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace FaceApp.Migrations
{
    [DbContext(typeof(FaceAppDBContext))]
    [Migration("20230718111107_addTablePrograms")]
    partial class addTablePrograms
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FaceApp.Models.Attendance", b =>
                {
                    b.Property<int>("AttendanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AttendanceDate");

                    b.Property<int>("CreatedBy");

                    b.Property<string>("ModeofTransportation");

                    b.Property<int>("PersonId");

                    b.HasKey("AttendanceId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("FaceApp.Models.CalendarSetting", b =>
                {
                    b.Property<int>("CalendarId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CalendarName");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("FridayEndTime");

                    b.Property<bool>("FridayIsActive");

                    b.Property<DateTime?>("FridayStartTime");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("MondayEndTime");

                    b.Property<bool>("MondayIsActive");

                    b.Property<DateTime?>("MondayStartTime");

                    b.Property<DateTime?>("SaturdayEndTime");

                    b.Property<bool>("SaturdayIsActive");

                    b.Property<DateTime?>("SaturdayStartTime");

                    b.Property<DateTime?>("SundayEndTime");

                    b.Property<bool>("SundayIsActive");

                    b.Property<DateTime?>("SundayStartTime");

                    b.Property<DateTime?>("ThursdayEndTime");

                    b.Property<bool>("ThursdayIsActive");

                    b.Property<DateTime?>("ThursdayStartTime");

                    b.Property<DateTime?>("TuesdayEndTime");

                    b.Property<bool>("TuesdayIsActive");

                    b.Property<DateTime?>("TuesdayStartTime");

                    b.Property<DateTime?>("WednesdayEndTime");

                    b.Property<bool>("WednesdayIsActive");

                    b.Property<DateTime?>("WednesdayStartTime");

                    b.HasKey("CalendarId");

                    b.ToTable("CalendarSetting");
                });

            modelBuilder.Entity("FaceApp.Models.PersonDetails", b =>
                {
                    b.Property<Guid>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PersonName");

                    b.HasKey("PersonId");

                    b.ToTable("PersonDetails");
                });

            modelBuilder.Entity("FaceApp.Models.Persons", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address1");

                    b.Property<string>("Address2");

                    b.Property<string>("City");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleInitial");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PersonId1");

                    b.Property<string>("PersonId2");

                    b.Property<string>("PersonId3");

                    b.Property<string>("State");

                    b.Property<string>("Zip");

                    b.HasKey("PersonId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("FaceApp.Models.PersonTrainDetails", b =>
                {
                    b.Property<Guid>("PersonTrainId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PersonId");

                    b.HasKey("PersonTrainId");

                    b.ToTable("PersonTrainDetails");
                });

            modelBuilder.Entity("FaceApp.Models.ProgramCalendarDetails", b =>
                {
                    b.Property<int>("ProgramCalendarDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CalendarId");

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ProgramId");

                    b.HasKey("ProgramCalendarDetailsId");

                    b.ToTable("ProgramCalendarDetails");
                });

            modelBuilder.Entity("FaceApp.Models.Programs", b =>
                {
                    b.Property<int>("ProgramId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("GLAccountCode");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProgramDescription");

                    b.Property<string>("ProgramId1");

                    b.Property<string>("ProgramId2");

                    b.Property<string>("ProgramId3");

                    b.Property<string>("ProgramName");

                    b.HasKey("ProgramId");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("FaceApp.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsForgotPassword");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Password");

                    b.Property<string>("Salt");

                    b.Property<string>("SecurityGroup")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserEmpId");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
